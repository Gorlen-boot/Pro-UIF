// Generated by gencpp from file my_project_test/CmdFromDecisionToCAN.msg
// DO NOT EDIT!


#ifndef MY_PROJECT_TEST_MESSAGE_CMDFROMDECISIONTOCAN_H
#define MY_PROJECT_TEST_MESSAGE_CMDFROMDECISIONTOCAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace my_project_test
{
template <class ContainerAllocator>
struct CmdFromDecisionToCAN_
{
  typedef CmdFromDecisionToCAN_<ContainerAllocator> Type;

  CmdFromDecisionToCAN_()
    : header()
    , horn_cmd(0)
    , high_beam_switch(false)
    , dipped_headlight_switch(false)
    , fog_lamp_switch(false)
    , night_light_swith(false)
    , left_turn_light_switch(false)
    , right_turn_light_switch(false)
    , double_flash_switch(false)
    , truck_start_switch(false)
    , truck_turn_off_switch(false)  {
    }
  CmdFromDecisionToCAN_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , horn_cmd(0)
    , high_beam_switch(false)
    , dipped_headlight_switch(false)
    , fog_lamp_switch(false)
    , night_light_swith(false)
    , left_turn_light_switch(false)
    , right_turn_light_switch(false)
    , double_flash_switch(false)
    , truck_start_switch(false)
    , truck_turn_off_switch(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _horn_cmd_type;
  _horn_cmd_type horn_cmd;

   typedef uint8_t _high_beam_switch_type;
  _high_beam_switch_type high_beam_switch;

   typedef uint8_t _dipped_headlight_switch_type;
  _dipped_headlight_switch_type dipped_headlight_switch;

   typedef uint8_t _fog_lamp_switch_type;
  _fog_lamp_switch_type fog_lamp_switch;

   typedef uint8_t _night_light_swith_type;
  _night_light_swith_type night_light_swith;

   typedef uint8_t _left_turn_light_switch_type;
  _left_turn_light_switch_type left_turn_light_switch;

   typedef uint8_t _right_turn_light_switch_type;
  _right_turn_light_switch_type right_turn_light_switch;

   typedef uint8_t _double_flash_switch_type;
  _double_flash_switch_type double_flash_switch;

   typedef uint8_t _truck_start_switch_type;
  _truck_start_switch_type truck_start_switch;

   typedef uint8_t _truck_turn_off_switch_type;
  _truck_turn_off_switch_type truck_turn_off_switch;





  typedef boost::shared_ptr< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> const> ConstPtr;

}; // struct CmdFromDecisionToCAN_

typedef ::my_project_test::CmdFromDecisionToCAN_<std::allocator<void> > CmdFromDecisionToCAN;

typedef boost::shared_ptr< ::my_project_test::CmdFromDecisionToCAN > CmdFromDecisionToCANPtr;
typedef boost::shared_ptr< ::my_project_test::CmdFromDecisionToCAN const> CmdFromDecisionToCANConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_project_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'my_project_test': ['/home/workSpace/Pro-UIF-master/src/my_project_test/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "794f8581ed4b7cd81356a97e74c8e902";
  }

  static const char* value(const ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x794f8581ed4b7cd8ULL;
  static const uint64_t static_value2 = 0x1356a97e74c8e902ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_project_test/CmdFromDecisionToCAN";
  }

  static const char* value(const ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# [topic_name]:/pingshuo_decision_node/TruckCmdFromDecisionToCAN\n\
\n\
Header header\n\
\n\
int16 horn_cmd                      # 喇叭控制量 0/1/2/3 0：不响，1-3代表响1~3声；交通路口鸣笛\n\
bool high_beam_switch  		        # 远光灯开关,false-关 true-开\n\
bool dipped_headlight_switch	    # 近光灯开关,false-关 true-开\n\
bool fog_lamp_switch	            # 雾灯,false-关 true-开\n\
bool night_light_swith              # 夜行灯,false-关 true-开\n\
bool left_turn_light_switch         # 左转灯,false-关 true-开\n\
bool right_turn_light_switch 	    # 右转灯,false-关 true-开\n\
bool double_flash_switch            # 双闪,false-关 true-开\n\
bool truck_start_switch             # 车辆启动,false-关 true-开\n\
bool truck_turn_off_switch          # 车辆熄火,false-关 true-开\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.horn_cmd);
      stream.next(m.high_beam_switch);
      stream.next(m.dipped_headlight_switch);
      stream.next(m.fog_lamp_switch);
      stream.next(m.night_light_swith);
      stream.next(m.left_turn_light_switch);
      stream.next(m.right_turn_light_switch);
      stream.next(m.double_flash_switch);
      stream.next(m.truck_start_switch);
      stream.next(m.truck_turn_off_switch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CmdFromDecisionToCAN_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_project_test::CmdFromDecisionToCAN_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "horn_cmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.horn_cmd);
    s << indent << "high_beam_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.high_beam_switch);
    s << indent << "dipped_headlight_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dipped_headlight_switch);
    s << indent << "fog_lamp_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fog_lamp_switch);
    s << indent << "night_light_swith: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.night_light_swith);
    s << indent << "left_turn_light_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_turn_light_switch);
    s << indent << "right_turn_light_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_turn_light_switch);
    s << indent << "double_flash_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.double_flash_switch);
    s << indent << "truck_start_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.truck_start_switch);
    s << indent << "truck_turn_off_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.truck_turn_off_switch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PROJECT_TEST_MESSAGE_CMDFROMDECISIONTOCAN_H

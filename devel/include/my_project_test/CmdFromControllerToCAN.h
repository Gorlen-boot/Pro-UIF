// Generated by gencpp from file my_project_test/CmdFromControllerToCAN.msg
// DO NOT EDIT!


#ifndef MY_PROJECT_TEST_MESSAGE_CMDFROMCONTROLLERTOCAN_H
#define MY_PROJECT_TEST_MESSAGE_CMDFROMCONTROLLERTOCAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace my_project_test
{
template <class ContainerAllocator>
struct CmdFromControllerToCAN_
{
  typedef CmdFromControllerToCAN_<ContainerAllocator> Type;

  CmdFromControllerToCAN_()
    : header()
    , accel_pedal_cmd(0.0)
    , retard_pedal_cmd(0.0)
    , gear_cmd(0)
    , brake_pedal_cmd(0.0)
    , lift_container_cmd(0)
    , load_brake_cmd(0)
    , park_brake_cmd(0)
    , target_angle_of_control_wheel(0.0)  {
    }
  CmdFromControllerToCAN_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , accel_pedal_cmd(0.0)
    , retard_pedal_cmd(0.0)
    , gear_cmd(0)
    , brake_pedal_cmd(0.0)
    , lift_container_cmd(0)
    , load_brake_cmd(0)
    , park_brake_cmd(0)
    , target_angle_of_control_wheel(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _accel_pedal_cmd_type;
  _accel_pedal_cmd_type accel_pedal_cmd;

   typedef double _retard_pedal_cmd_type;
  _retard_pedal_cmd_type retard_pedal_cmd;

   typedef int16_t _gear_cmd_type;
  _gear_cmd_type gear_cmd;

   typedef double _brake_pedal_cmd_type;
  _brake_pedal_cmd_type brake_pedal_cmd;

   typedef int16_t _lift_container_cmd_type;
  _lift_container_cmd_type lift_container_cmd;

   typedef int16_t _load_brake_cmd_type;
  _load_brake_cmd_type load_brake_cmd;

   typedef int16_t _park_brake_cmd_type;
  _park_brake_cmd_type park_brake_cmd;

   typedef double _target_angle_of_control_wheel_type;
  _target_angle_of_control_wheel_type target_angle_of_control_wheel;





  typedef boost::shared_ptr< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> const> ConstPtr;

}; // struct CmdFromControllerToCAN_

typedef ::my_project_test::CmdFromControllerToCAN_<std::allocator<void> > CmdFromControllerToCAN;

typedef boost::shared_ptr< ::my_project_test::CmdFromControllerToCAN > CmdFromControllerToCANPtr;
typedef boost::shared_ptr< ::my_project_test::CmdFromControllerToCAN const> CmdFromControllerToCANConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_project_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'my_project_test': ['/home/workSpace/Pro-UIF-master/src/my_project_test/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a522b352bacc640b9b26f3ed3fdba69";
  }

  static const char* value(const ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a522b352bacc640ULL;
  static const uint64_t static_value2 = 0xb9b26f3ed3fdba69ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_project_test/CmdFromControllerToCAN";
  }

  static const char* value(const ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# [topic_name]:/pingshuo_controller_node/TruckCmdFromControllerToCAN\n\
\n\
Header header\n\
\n\
float64 accel_pedal_cmd			            #油门控制量 0~100\n\
float64 retard_pedal_cmd		            #电缓行控制量 0~100\n\
int16   gear_cmd				            #目标档位指令 0-N 1-D 2-R\n\
float64 brake_pedal_cmd			            #液压工作制动控制量 0~100\n\
int16   lift_container_cmd			        #0-保持 1-举升 2-降落 3-浮动\n\
int16   load_brake_cmd			            #装载制动开关 0-不制动 1-制动\n\
int16   park_brake_cmd                      #驻车制动开关 0-不制动 1-制动\n\
float64 target_angle_of_control_wheel	    #左前轮控制轮转向角 -35~35 deg\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.accel_pedal_cmd);
      stream.next(m.retard_pedal_cmd);
      stream.next(m.gear_cmd);
      stream.next(m.brake_pedal_cmd);
      stream.next(m.lift_container_cmd);
      stream.next(m.load_brake_cmd);
      stream.next(m.park_brake_cmd);
      stream.next(m.target_angle_of_control_wheel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CmdFromControllerToCAN_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_project_test::CmdFromControllerToCAN_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accel_pedal_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.accel_pedal_cmd);
    s << indent << "retard_pedal_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.retard_pedal_cmd);
    s << indent << "gear_cmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gear_cmd);
    s << indent << "brake_pedal_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.brake_pedal_cmd);
    s << indent << "lift_container_cmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lift_container_cmd);
    s << indent << "load_brake_cmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.load_brake_cmd);
    s << indent << "park_brake_cmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.park_brake_cmd);
    s << indent << "target_angle_of_control_wheel: ";
    Printer<double>::stream(s, indent + "  ", v.target_angle_of_control_wheel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PROJECT_TEST_MESSAGE_CMDFROMCONTROLLERTOCAN_H

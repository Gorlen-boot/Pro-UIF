# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_project_test/InfoFromCan.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class InfoFromCan(genpy.Message):
  _md5sum = "bda89dc8657dd2a63999416b115e9fde"
  _type = "my_project_test/InfoFromCan"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# [topic_name]:/can_node/TruckInfoFromCAN

Header header

int16   executive_fault_level             # 执行层故障等级信号 0/1/2/3 , 1-绿色,表示心跳 2-黄色 3-红色等级故障
float64 truck_load_weight               # 车辆载重信号      0~255吨
float64 hydraulic_brake_fb              # 液压工作制动反馈信号 0~100 对应0~最高压力
int16   auto_mode_fb                      # 无人/人工驾驶模式信号 0/1 0:人工驾驶，1：自动驾驶
int16   emergency_brake_fb                # 紧急制动-实施/解除反馈信号 0/1 0:解除，1：已实施
int16   container_rising                  # 车厢举升控制信号 0/1 1:举升中
int16   container_falling                 # 车厢下降控制信号 0/1 1:下降中
int16   container_rising_over             # 车厢举升控制反馈信号 0/1 1:举升到位
int16   container_falling_over            # 车厢下降控制反馈信号 0/1 1:下降到位
int16   electric_brake_fb                 # 电缓行实施  0/1  0:未实施，1：已实施
int16   load_brake_fb                     # 装载制动-实施/解除反馈信号 0/1 0:解除，1：已实施
int16   park_brake_fb                     # 驻车制动-实施/解除反馈信号 0/1 0:解除，1：已实施
float64 remaining_oil                   # 油量剩余 0~100 0~100%百分比范围值
float64 steer_angle_fb                  # 左前轮转向角（左转为正，右转为负）-35~35
float64 engine_speed                    # 发动机转速 0~8031.875rpm
float64 truck_speed                     # 车速 0~125km/h
int16   gear_fb                           # 档位反馈  0/1/2 0-N,1-D,2-R
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','executive_fault_level','truck_load_weight','hydraulic_brake_fb','auto_mode_fb','emergency_brake_fb','container_rising','container_falling','container_rising_over','container_falling_over','electric_brake_fb','load_brake_fb','park_brake_fb','remaining_oil','steer_angle_fb','engine_speed','truck_speed','gear_fb']
  _slot_types = ['std_msgs/Header','int16','float64','float64','int16','int16','int16','int16','int16','int16','int16','int16','int16','float64','float64','float64','float64','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,executive_fault_level,truck_load_weight,hydraulic_brake_fb,auto_mode_fb,emergency_brake_fb,container_rising,container_falling,container_rising_over,container_falling_over,electric_brake_fb,load_brake_fb,park_brake_fb,remaining_oil,steer_angle_fb,engine_speed,truck_speed,gear_fb

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InfoFromCan, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.executive_fault_level is None:
        self.executive_fault_level = 0
      if self.truck_load_weight is None:
        self.truck_load_weight = 0.
      if self.hydraulic_brake_fb is None:
        self.hydraulic_brake_fb = 0.
      if self.auto_mode_fb is None:
        self.auto_mode_fb = 0
      if self.emergency_brake_fb is None:
        self.emergency_brake_fb = 0
      if self.container_rising is None:
        self.container_rising = 0
      if self.container_falling is None:
        self.container_falling = 0
      if self.container_rising_over is None:
        self.container_rising_over = 0
      if self.container_falling_over is None:
        self.container_falling_over = 0
      if self.electric_brake_fb is None:
        self.electric_brake_fb = 0
      if self.load_brake_fb is None:
        self.load_brake_fb = 0
      if self.park_brake_fb is None:
        self.park_brake_fb = 0
      if self.remaining_oil is None:
        self.remaining_oil = 0.
      if self.steer_angle_fb is None:
        self.steer_angle_fb = 0.
      if self.engine_speed is None:
        self.engine_speed = 0.
      if self.truck_speed is None:
        self.truck_speed = 0.
      if self.gear_fb is None:
        self.gear_fb = 0
    else:
      self.header = std_msgs.msg.Header()
      self.executive_fault_level = 0
      self.truck_load_weight = 0.
      self.hydraulic_brake_fb = 0.
      self.auto_mode_fb = 0
      self.emergency_brake_fb = 0
      self.container_rising = 0
      self.container_falling = 0
      self.container_rising_over = 0
      self.container_falling_over = 0
      self.electric_brake_fb = 0
      self.load_brake_fb = 0
      self.park_brake_fb = 0
      self.remaining_oil = 0.
      self.steer_angle_fb = 0.
      self.engine_speed = 0.
      self.truck_speed = 0.
      self.gear_fb = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h2d9h4dh().pack(_x.executive_fault_level, _x.truck_load_weight, _x.hydraulic_brake_fb, _x.auto_mode_fb, _x.emergency_brake_fb, _x.container_rising, _x.container_falling, _x.container_rising_over, _x.container_falling_over, _x.electric_brake_fb, _x.load_brake_fb, _x.park_brake_fb, _x.remaining_oil, _x.steer_angle_fb, _x.engine_speed, _x.truck_speed, _x.gear_fb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 70
      (_x.executive_fault_level, _x.truck_load_weight, _x.hydraulic_brake_fb, _x.auto_mode_fb, _x.emergency_brake_fb, _x.container_rising, _x.container_falling, _x.container_rising_over, _x.container_falling_over, _x.electric_brake_fb, _x.load_brake_fb, _x.park_brake_fb, _x.remaining_oil, _x.steer_angle_fb, _x.engine_speed, _x.truck_speed, _x.gear_fb,) = _get_struct_h2d9h4dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h2d9h4dh().pack(_x.executive_fault_level, _x.truck_load_weight, _x.hydraulic_brake_fb, _x.auto_mode_fb, _x.emergency_brake_fb, _x.container_rising, _x.container_falling, _x.container_rising_over, _x.container_falling_over, _x.electric_brake_fb, _x.load_brake_fb, _x.park_brake_fb, _x.remaining_oil, _x.steer_angle_fb, _x.engine_speed, _x.truck_speed, _x.gear_fb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 70
      (_x.executive_fault_level, _x.truck_load_weight, _x.hydraulic_brake_fb, _x.auto_mode_fb, _x.emergency_brake_fb, _x.container_rising, _x.container_falling, _x.container_rising_over, _x.container_falling_over, _x.electric_brake_fb, _x.load_brake_fb, _x.park_brake_fb, _x.remaining_oil, _x.steer_angle_fb, _x.engine_speed, _x.truck_speed, _x.gear_fb,) = _get_struct_h2d9h4dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_h2d9h4dh = None
def _get_struct_h2d9h4dh():
    global _struct_h2d9h4dh
    if _struct_h2d9h4dh is None:
        _struct_h2d9h4dh = struct.Struct("<h2d9h4dh")
    return _struct_h2d9h4dh

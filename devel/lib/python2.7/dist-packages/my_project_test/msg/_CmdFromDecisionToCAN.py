# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_project_test/CmdFromDecisionToCAN.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class CmdFromDecisionToCAN(genpy.Message):
  _md5sum = "794f8581ed4b7cd81356a97e74c8e902"
  _type = "my_project_test/CmdFromDecisionToCAN"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# [topic_name]:/pingshuo_decision_node/TruckCmdFromDecisionToCAN

Header header

int16 horn_cmd                      # 喇叭控制量 0/1/2/3 0：不响，1-3代表响1~3声；交通路口鸣笛
bool high_beam_switch  		        # 远光灯开关,false-关 true-开
bool dipped_headlight_switch	    # 近光灯开关,false-关 true-开
bool fog_lamp_switch	            # 雾灯,false-关 true-开
bool night_light_swith              # 夜行灯,false-关 true-开
bool left_turn_light_switch         # 左转灯,false-关 true-开
bool right_turn_light_switch 	    # 右转灯,false-关 true-开
bool double_flash_switch            # 双闪,false-关 true-开
bool truck_start_switch             # 车辆启动,false-关 true-开
bool truck_turn_off_switch          # 车辆熄火,false-关 true-开
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','horn_cmd','high_beam_switch','dipped_headlight_switch','fog_lamp_switch','night_light_swith','left_turn_light_switch','right_turn_light_switch','double_flash_switch','truck_start_switch','truck_turn_off_switch']
  _slot_types = ['std_msgs/Header','int16','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,horn_cmd,high_beam_switch,dipped_headlight_switch,fog_lamp_switch,night_light_swith,left_turn_light_switch,right_turn_light_switch,double_flash_switch,truck_start_switch,truck_turn_off_switch

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CmdFromDecisionToCAN, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.horn_cmd is None:
        self.horn_cmd = 0
      if self.high_beam_switch is None:
        self.high_beam_switch = False
      if self.dipped_headlight_switch is None:
        self.dipped_headlight_switch = False
      if self.fog_lamp_switch is None:
        self.fog_lamp_switch = False
      if self.night_light_swith is None:
        self.night_light_swith = False
      if self.left_turn_light_switch is None:
        self.left_turn_light_switch = False
      if self.right_turn_light_switch is None:
        self.right_turn_light_switch = False
      if self.double_flash_switch is None:
        self.double_flash_switch = False
      if self.truck_start_switch is None:
        self.truck_start_switch = False
      if self.truck_turn_off_switch is None:
        self.truck_turn_off_switch = False
    else:
      self.header = std_msgs.msg.Header()
      self.horn_cmd = 0
      self.high_beam_switch = False
      self.dipped_headlight_switch = False
      self.fog_lamp_switch = False
      self.night_light_swith = False
      self.left_turn_light_switch = False
      self.right_turn_light_switch = False
      self.double_flash_switch = False
      self.truck_start_switch = False
      self.truck_turn_off_switch = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h9B().pack(_x.horn_cmd, _x.high_beam_switch, _x.dipped_headlight_switch, _x.fog_lamp_switch, _x.night_light_swith, _x.left_turn_light_switch, _x.right_turn_light_switch, _x.double_flash_switch, _x.truck_start_switch, _x.truck_turn_off_switch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.horn_cmd, _x.high_beam_switch, _x.dipped_headlight_switch, _x.fog_lamp_switch, _x.night_light_swith, _x.left_turn_light_switch, _x.right_turn_light_switch, _x.double_flash_switch, _x.truck_start_switch, _x.truck_turn_off_switch,) = _get_struct_h9B().unpack(str[start:end])
      self.high_beam_switch = bool(self.high_beam_switch)
      self.dipped_headlight_switch = bool(self.dipped_headlight_switch)
      self.fog_lamp_switch = bool(self.fog_lamp_switch)
      self.night_light_swith = bool(self.night_light_swith)
      self.left_turn_light_switch = bool(self.left_turn_light_switch)
      self.right_turn_light_switch = bool(self.right_turn_light_switch)
      self.double_flash_switch = bool(self.double_flash_switch)
      self.truck_start_switch = bool(self.truck_start_switch)
      self.truck_turn_off_switch = bool(self.truck_turn_off_switch)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h9B().pack(_x.horn_cmd, _x.high_beam_switch, _x.dipped_headlight_switch, _x.fog_lamp_switch, _x.night_light_swith, _x.left_turn_light_switch, _x.right_turn_light_switch, _x.double_flash_switch, _x.truck_start_switch, _x.truck_turn_off_switch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.horn_cmd, _x.high_beam_switch, _x.dipped_headlight_switch, _x.fog_lamp_switch, _x.night_light_swith, _x.left_turn_light_switch, _x.right_turn_light_switch, _x.double_flash_switch, _x.truck_start_switch, _x.truck_turn_off_switch,) = _get_struct_h9B().unpack(str[start:end])
      self.high_beam_switch = bool(self.high_beam_switch)
      self.dipped_headlight_switch = bool(self.dipped_headlight_switch)
      self.fog_lamp_switch = bool(self.fog_lamp_switch)
      self.night_light_swith = bool(self.night_light_swith)
      self.left_turn_light_switch = bool(self.left_turn_light_switch)
      self.right_turn_light_switch = bool(self.right_turn_light_switch)
      self.double_flash_switch = bool(self.double_flash_switch)
      self.truck_start_switch = bool(self.truck_start_switch)
      self.truck_turn_off_switch = bool(self.truck_turn_off_switch)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_h9B = None
def _get_struct_h9B():
    global _struct_h9B
    if _struct_h9B is None:
        _struct_h9B = struct.Struct("<h9B")
    return _struct_h9B
